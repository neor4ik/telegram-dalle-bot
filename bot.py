import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚ú®")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... üé®")

    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="512x512"
        )
        image_url = response['data'][0]['url']
        await update.message.reply_photo(photo=image_url, caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
    > neora:
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFFS = {
    'free': {'name': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π', 'tokens': 10, 'price': '0 ‚ÇΩ'},
    'basic': {'name': '–ë–∞–∑–æ–≤—ã–π', 'tokens': 50, 'price': '120 ‚ÇΩ'},
    'optimal': {'name': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π', 'tokens': 150, 'price': '400 ‚ÇΩ'},
    'premium': {'name': '–ü—Ä–µ–º–∏—É–º', 'tokens': 400, 'price': '1000 ‚ÇΩ'},
}

TOKEN_COST = 3  # —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã (SQLite)
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    tokens INTEGER DEFAULT 0
)
''')
conn.commit()

def get_tokens(user_id: int) -> int:
    cursor.execute('SELECT tokens FROM users WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

def set_tokens(user_id: int, tokens: int):
    if get_tokens(user_id) == 0:
        cursor.execute('INSERT OR IGNORE INTO users(user_id, tokens) VALUES (?, ?)', (user_id, tokens))
    else:
        cursor.execute('UPDATE users SET tokens = ? WHERE user_id = ?', (tokens, user_id))
    conn.commit()

def add_tokens(user_id: int, amount: int):
    current = get_tokens(user_id)
    set_tokens(user_id, current + amount)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∏–∫–æ–Ω–∫–∞–º–∏
quick_commands_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üõí –ö—É–ø–∏—Ç—å"), KeyboardButton("üìÉ –¢–∞—Ä–∏—Ñ—ã")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ö–æ–º–∞–Ω–¥—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{v['name']} ‚Äî {v['price']}", callback_data=f"tariff_{k}")]
        for k, v in TARIFFS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:",
        reply_markup=reply_markup
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.",
        reply_markup=quick_commands_keyboard
    )

async def tariff_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data.split('_')[1]
    tariff = TARIFFS.get(selected)
    if not tariff:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    user_id = query.from_user.id
    add_tokens(user_id, tariff['tokens'])

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff['name']}\n"
        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {tariff['tokens']} —Ç–æ–∫–µ–Ω–æ–≤.\n"
        f"–¶–µ–Ω–∞: {tariff['price']}\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {TOKEN_COST} —Ç–æ–∫–µ–Ω–æ–≤.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.",
        reply_markup=quick_commands_keyboard
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tokens = get_tokens(user_id)
    await update.message.reply_text(f"–£ –≤–∞—Å {tokens} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=quick_commands_keyboard)

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tokens = get_tokens(user_id)
    if tokens < TOKEN_COST:
        await update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            f"–ö—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=quick_commands_keyboard
        )
        return

    set_tokens(user_id, tokens - TOKEN_COST)

    # –ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! (–ó–∞–≥–ª—É—à–∫–∞)", reply_markup=quick_commands_keyboard)

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"

> neora:
"–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆMoney.",
        reply_markup=quick_commands_keyboard
    )

# –ß—Ç–æ–±—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def quick_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        await generate(update, context)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "üõí –ö—É–ø–∏—Ç—å":
        await buy(update, context)
    elif text == "üìÉ –¢–∞—Ä–∏—Ñ—ã":
        await start(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã

def main():
    app = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(tariff_button, pattern=r"^tariff_"))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("generate", generate))
    app.add_handler(CommandHandler("buy", buy))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("menu", start))  # –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –ø–æ /menu
    app.add_handler(CommandHandler("help", start))  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    app.add_handler(CommandHandler("tariffs", start))  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
    app.add_handler(CommandHandler("plans", start))  # –ï—â–µ –æ–¥–∏–Ω –∞–ª–∏–∞—Å

    from telegram.ext import MessageHandler, filters
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), quick_command_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if name == '__main__':
    main()

